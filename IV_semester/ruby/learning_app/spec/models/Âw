require File.dirname(__FILE__) + '/../spec_helper'

describe Word do
  fixtures :users
  fixtures :words
  fixtures :guesses

  before do
    @guess = Guess.new
  end

  describe Word, " validations/associations" do
    it { should validate_presence_of :value }
    it { should validate_presence_of :translation }
    it { should belong_to :user }
    it { should have_many :guesses }
    it { should have_many :tags }
    it { should have_and_belong_to_many :exams }
  end

  describe Word, " guessing" do
    it "should return true if guess was correct when guessing by value" do
      words(:spouse).guess(guesses(:correct_by_value)).should == true
    end

    it "should return true if guess was correct when guessing by translation " do
      words(:spouse).guess(guesses(:correct_by_translation)).should == true
    end

    it "should return false if guess was incorrect when guessing by value" do
      words(:spouse).guess(guesses(:incorrect_by_value)).should == false
    end

    it "should return false if guess was incorrect when guessing by translation" do
      words(:spouse).guess(guesses(:incorrect_by_translation)).should == false
    end

    it "should be guessed with specified accuracy"
  end

  describe Word, " counting guessing statistics" do
    it "should know how many times it was guessed" do
      2.times { words(:spouse).guess(guesses(:correct_by_value)) }
      2.times { words(:spouse).guess(guesses(:incorrect_by_value)) }

      words(:spouse).times_guessed.should == 4
    end

    it "should know how many times it was answered" do
      2.times { words(:spouse).guess(guesses(:correct_by_value)) }
      2.times { words(:spouse).guess(guesses(:incorrect_by_translation)) }

      words(:spouse).times_answered.should == 2
    end

    it "should be guessed and answerred equally" do
      2.times { words(:spouse).guess(guesses(:correct_by_translation)) }
      words(:spouse).times_guessed.should == words(:spouse).times_answered
    end
  end

  describe Word, " getting synonyms" do
    before do
      words(:test).synonym_finder = mock()
    end

    it "should get a specified number of synonyms in array" do
      words(:test).synonym_finder.expects(:related).with(words(:test).value, 2, :type => :synonym).returns([{"wordstrings"=>["judgment", "distinction"], "relType"=>"synonym"}])

      synonyms = words(:test).synonyms(2)
      synonyms.size.should == 2
    end

    it "s value should not be among returned synonyms" do
      words(:test).synonym_finder.expects(:related).with(words(:test).value, 2, :type => :synonym).returns([{"wordstrings"=>["judgment", "distinction"], "relType"=>"synonym"}])

      synonyms = words(:test).synonyms(2)
      synonyms.include?(words(:test).value).should == false 
    end

    it "should return 4 synonyms if count is not specified" do
      words(:test).synonym_finder.expects(:related).with(words(:test).value, 4, :type => :synonym).returns([{"wordstrings"=>["judgment", "distinction", "standard", "touchstone"], "relType"=>"synonym"}])

      words(:spouse).synonyms.size.should == 4
    end

    it "should get an array of similar translations" do
      words(:spouse).similar_definitions(3).size.should == 4
    end

    it "should return 4 similar definitions if count is not specified" do 
      words(:spouse).similar_definitions.size.should == 4
    end

    it "should return empty array if there was no synonyms" do
      words(:spouse).stubs(:value => "123123_should_have_no_synonyms2k3j1l") 
      words(:spouse).synonyms.should be_empty
    end

    #it "should retrieve synonyms with given API" do
      #finder = words(:spouse).synonym_finder
      #finder.expects(:related).with(words(:spouse).value, 4, :type=>:synonym)
      #words(:spouse).synonyms
    #end

    # TODO:
    #   Finish synonyming
    #   Explore mocha for mocking examples
    #   User_authentication
  end
end
